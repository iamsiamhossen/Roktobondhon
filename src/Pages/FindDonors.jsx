import { useState } from "react";

const FindDonors = () => {
  // ржбрж╛ржорж┐ ржбрзЗржЯрж╛ - ржкрж░ржмрж░рзНрждрзАрждрзЗ API ржерзЗржХрзЗ рж▓рзЛржб ржХрж░рж╛ рж╣ржмрзЗ
  const donors = [
    { 
      id: 1, 
      name: "рж░рж╛рж╣рж┐ржо", 
      bloodGroup: "A+", 
      location: "ржврж╛ржХрж╛", 
      available: true, 
      lastDonation: "рзирзжрзирзк-рзжрзз-рззрзл",
      rating: 4.5,
      phone: "рзжрззрзнрззрзи-рзйрзкрзлрзмрзнрзо"
    },
    { 
      id: 2, 
      name: "ржХрж░рж┐ржо", 
      bloodGroup: "O-", 
      location: "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо", 
      available: false, 
      lastDonation: "рзирзжрзирзй-рззрзи-рзирзж",
      rating: 4.2,
      phone: "рзжрззрзпрзорзн-рзмрзлрзкрзйрзирзз"
    },
  ];

  // рж╕рзНржЯрзЗржЯ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedBloodGroup, setSelectedBloodGroup] = useState("");
  const [selectedLocation, setSelectedLocation] = useState("");
  const [onlyAvailable, setOnlyAvailable] = useState(false);
  const [showPhone, setShowPhone] = useState(null);
  const [urgencyLevel, setUrgencyLevel] = useState("");

  // ржлрж┐рж▓рзНржЯрж╛рж░ рж▓ржЬрж┐ржХ
  const filteredDonors = donors.filter(donor => {
    const matchesSearch = donor.name.includes(searchQuery) || donor.bloodGroup.includes(searchQuery);
    const matchesBloodGroup = selectedBloodGroup ? donor.bloodGroup === selectedBloodGroup : true;
    const matchesLocation = selectedLocation ? donor.location === selectedLocation : true;
    const matchesAvailability = onlyAvailable ? donor.available : true;
    const matchesUrgency = urgencyLevel ? donor.available : true;

    return matchesSearch && matchesBloodGroup && matchesLocation && matchesAvailability && matchesUrgency;
  });

  return (
    <div className="min-h-screen bg-gray-100 p-6 font-kalpurush">
      <h1 className="text-3xl font-bold text-center text-red-600 mb-2"> рж░ржХрзНрждржжрж╛рждрж╛ ржЦрзБржБржЬрзБржи</h1>
      <p className="text-center text-gray-700 text-lg">ржЖржкржирж╛рж░ ржирж┐ржХржЯрж╕рзНрже рж░ржХрзНрждржжрж╛рждрж╛ржжрзЗрж░ рж╕рж╛ржерзЗ рж╕рж░рж╛рж╕рж░рж┐ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи</p>

      {/* рж╕рж╛рж░рзНржЪ ржПржмржВ ржлрж┐рж▓рзНржЯрж╛рж░ рж╕рзЗржХрж╢ржи */}
      <div className="mt-8 bg-white p-6 rounded-xl shadow-lg  text-red-600 ">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <input
            type="text"
            placeholder="ржирж╛ржо ржмрж╛ рж░ржХрзНрждрзЗрж░ ржЧрзНрж░рзБржк"
            className="p-3 border-2 border-red-100 rounded-lg focus:ring-2 focus:ring-red-400"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />

          <select 
            className="p-3 border-2 border-red-100 rounded-lg"
            value={selectedBloodGroup}
            onChange={(e) => setSelectedBloodGroup(e.target.value)}
          >
            <option value="">рж╕ржм рж░ржХрзНрждрзЗрж░ ржЧрзНрж░рзБржк</option>
            <option value="A+">A+</option>
            <option value="A-">A-</option>
            <option value="B+">B+</option>
            <option value="B-">B-</option>
            <option value="O+">O+</option>
            <option value="O-">O-</option>
            <option value="AB+">AB+</option>
            <option value="AB-">AB-</option>
          </select>

          <select
            className="p-3 border-2 border-red-100 rounded-lg"
            value={selectedLocation}
            onChange={(e) => setSelectedLocation(e.target.value)}
          >
            <option value="">рж╕ржм ржПрж▓рж╛ржХрж╛</option>
            <option value="ржврж╛ржХрж╛">ржврж╛ржХрж╛</option>
            <option value="ржЪржЯрзНржЯржЧрзНрж░рж╛ржо">ржЪржЯрзНржЯржЧрзНрж░рж╛ржо</option>
            <option value="рж╕рж┐рж▓рзЗржЯ">рж╕рж┐рж▓рзЗржЯ</option>
          </select>

          <select
            className="p-3 border-2 border-red-100 rounded-lg"
            value={urgencyLevel}
            onChange={(e) => setUrgencyLevel(e.target.value)}
          >
            <option value="">ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛</option>
            <option value="high">ржЬрзАржмржи-ржорж░ржг (рзирзк ржШржгрзНржЯрж╛)</option>
            <option value="medium">ржЬрж░рзБрж░рж┐ (рзкрзо ржШржгрзНржЯрж╛)</option>
            <option value="low">рж╕рж╛ржзрж╛рж░ржг (рзн ржжрж┐ржи)</option>
          </select>
        </div>

        <div className="mt-4 flex items-center gap-4">
          <label className="flex items-center gap-2 text-red-600">
            <input 
              type="checkbox" 
              checked={onlyAvailable} 
              onChange={() => setOnlyAvailable(!onlyAvailable)} 
              className="w-5 h-5"
            />
            рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕ржХрзНрж░рж┐рзЯ ржжрж╛рждрж╛ ржжрзЗржЦрзБржи
          </label>
        </div>
      </div>

      {/* рж░ржХрзНрждржжрж╛рждрж╛ рж▓рж┐рж╕рзНржЯ */}
      <div className="mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredDonors.map(donor => (
          <div key={donor.id} className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-all">
            <div className="p-6">
              <div className="flex justify-between items-start">
                <div>
                  <h2 className="text-2xl font-bold text-red-600">{donor.name}</h2>
                  <p className="text-lg text-gray-600">{donor.bloodGroup}</p>
                </div>
                <span className={`px-3 py-1 rounded-full ${donor.available ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
                  {donor.available ? 'рж╕ржХрзНрж░рж┐рзЯ тЬЕ' : 'ржЕрж╕ржХрзНрж░рж┐рзЯ тЭМ'}
                </span>
              </div>

              <div className="mt-4 space-y-2">
                <p className="text-gray-700">ЁЯУН {donor.location}</p>
                <p className="text-gray-700">тнР рж░рзЗржЯрж┐ржВ: {donor.rating}/5</p>
                <p className="text-gray-700">ЁЯй╕ рж╢рзЗрж╖ ржжрж╛ржи: {donor.lastDonation}</p>
              </div>

              <div className="mt-4">
                {showPhone === donor.id ? (
                  <div className="bg-green-50 p-3 rounded-lg">
                    <p className="text-green-700 font-bold">ЁЯУЮ {donor.phone}</p>
                    <button 
                      onClick={() => setShowPhone(null)}
                      className="mt-2 text-red-600 hover:underline"
                    >
                      ржлрзЛржи ржиржорзНржмрж░ ржЧрзЛржкржи ржХрж░рзБржи
                    </button>
                  </div>
                ) : (
                  <button
                    onClick={() => setShowPhone(donor.id)}
                    className="w-full bg-red-600 text-white py-2 rounded-lg hover:bg-red-700 transition-colors"
                  >
                    ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
                  </button>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* ржорзНржпрж╛ржк ржнрж┐ржЙ рж╕рзЗржХрж╢ржи */}
      <div className="mt-8 bg-white p-6 rounded-xl shadow-lg">
        <h2 className="text-2xl font-bold text-red-600 mb-4">рж▓рзЛржХрзЗрж╢ржи ржнрж┐рждрзНрждрж┐ржХ ржорзНржпрж╛ржк</h2>
        <div className="h-64 bg-gray-100 rounded-lg flex items-center justify-center">
          <p className="text-gray-500">ржорзНржпрж╛ржк рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...</p>
        </div>
      </div>

      {/* ржЬрж░рзБрж░рж┐ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи */}
      <div className="mt-8 bg-red-100 p-6 rounded-xl">
        <h3 className="text-xl font-bold text-red-700">тЪая╕П ржЬрж░рзБрж░рж┐ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж┐рж╕рзНржЯрзЗржо</h3>
        <p className="mt-2 text-red-600">
          ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛рзЯ SMS ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрзЗрждрзЗ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж░рзБржи
        </p>
        <button className="mt-4 bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700">
          ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рж╛ржмрж╕рзНржХрзНрж░рж╛ржЗржм ржХрж░рзБржи
        </button>
      </div>
    </div>
  );
};

export default FindDonors;